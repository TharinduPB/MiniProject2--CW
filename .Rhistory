res_2021_1 <- phycon(malmsbury_21,447.8,435.0)
#inputs : limit for MAD
res_2021_2 <- mad_outliers(res_2021_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_2021_3 <- sgfilter(res_2021_2,0,105,0.03)
#inputs : limit for rate of rise, number-donot change
res_2021_4 <- raterise(malmsbury_21, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_2021_5 <- anomal_message(res_2021_4,500,0.02)
p1 <- plot_ly() %>%
add_trace(data=res_2021_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=malmsbury_21_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5))
subplot(p1,p2, nrows = 2)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = Timestamp, level = Level1) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2015-01-01"),
as.Date("2022-12-31")))
library(readr)
reslevels_raw <- read_csv("reslevels_raw.csv")
View(reslevels_raw)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = Level1) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data1 <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2015-01-01"),
as.Date("2022-12-31")))
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data1 <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston" &
between(as.Date(timestamp),
as.Date("2015-01-01"),
as.Date("2022-12-31")))
library(readr)
reslevels_raw <- read_csv("reslevels_raw.csv")
View(reslevels_raw)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
View(res_data)
#inputs : Full supply level and Min level
res_2021_1 <- phycon(res_data,480.0,475.0)
#inputs : Full supply level and Min level
res_2021_1 <- phycon(res_data,480,470)
#inputs : limit for MAD
res_2021_2 <- mad_outliers(res_2021_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_2021_3 <- sgfilter(res_2021_2,0,105,0.03)
#inputs : limit for rate of rise, number-donot change
res_2021_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_2021_5 <- anomal_message(res_2021_4,500,0.02)
p1 <- plot_ly() %>%
add_trace(data=res_2021_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=malmsbury_21_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5))
subplot(p1,p2, nrows = 2)
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
gc()
verified <- read_csv("406222_1.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
View(verified)
View(reslevels_raw)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406222.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406222.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406222.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
#inputs : Full supply level and Min level
res_2021_1 <- phycon(res_data,480,470)
#inputs : limit for MAD
res_2021_2 <- mad_outliers(res_2021_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_2021_3 <- sgfilter(res_2021_2,0,105,0.03)
#inputs : limit for rate of rise, number-donot change
res_2021_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_2021_5 <- anomal_message(res_2021_4,500,0.02)
p1 <- plot_ly() %>%
add_trace(data=res_2021_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~level, mode="lines",
type="scatter", line=list(width=0.4)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", line=list(width=0.4)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
p1 <- plot_ly() %>%
add_trace(data=res_2021_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406222.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data,480,470)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_2,0,105,0.03)
#inputs : limit for rate of rise, number-donot change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
View(res_data_3)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Lauriston Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406222.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
View(res_data_merge)
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,480,470)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_2,0,105,0.03)
#inputs : limit for rate of rise, number-do not change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_2021_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_2021_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
subplot(p1,p2, nrows = 2)
View(res_data_3)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Upper Coliban Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406221.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406221.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,480,470)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,507,490)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_2,0,105,0.03)
#inputs : limit for rate of rise, number-do not change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
reslevels_raw <- read.csv("C:/Users/thari/Desktop/PhD La Trobe/MiniProject2- CW/reslevels_raw.csv")
View(reslevels_raw)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Trentham No 1 Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406282.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406282.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406282.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406282.csv")  %>%
select(timestamp = Datetime ,
verified_level = `Water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406282.csv")  %>%
select(timestamp = Datetime ,
verified_level = `water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,735,729)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_2,0,105,0.03)
#inputs : limit for rate of rise, number-do not change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Trentham No 1 Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,735,729)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_1,0,105,0.03)
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
View(reslevels_raw)
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Trentham No 2 Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406273.csv")  %>%
select(timestamp = Datetime ,
verified_level = `water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified <- read_csv("406273.csv")  %>%
select(timestamp = Datetime ,
verified_level = `water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,733,729)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_1,0,105,0.03)
#inputs : limit for rate of rise, number-do not change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
gc()
res_data <- read_csv("reslevels_raw.csv") %>%
select(timestamp = timestamp, level = level, reservoir = reservoir) %>%
arrange(timestamp) %>%
dplyr::filter( !is.na(level) & level !=0 & reservoir == "Malmsbury Head Gauge" &
between(as.Date(timestamp),
as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_ori <- res_data
verified <- read_csv("406220.csv")  %>%
select(timestamp = Datetime ,
verified_level = `water Level` ,
qc = QC ) %>%
mutate(timestamp = lubridate::dmy_hms(timestamp))
verified_filtered <- verified %>%
arrange(timestamp) %>%
dplyr::filter( between(as.Date(timestamp), as.Date("2016-01-01"),
as.Date("2022-12-31")))
res_data_merge <- merge(res_data,verified_filtered,by = "timestamp")
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,480,470)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : Full supply level and Min level
res_data_1 <- phycon(res_data_merge,447.8,435)
#inputs : limit for MAD
res_data_2 <- mad_outliers(res_data_1, 3.5)
#inputs : binomial number, number of points considered, limit to cut off values
res_data_3 <- sgfilter(res_data_2,0,105,0.03)
#inputs : limit for rate of rise, number-do not change
res_data_4 <- raterise(res_data_ori, 0.01, 100)
#inputs : number of points in which the value will go down, deduction rate
res_data_5 <- anomal_message(res_data_4,500,0.02)
res_error_check <- res_data_3[1:3]
squared_diff <- (res_data_3$level - res_data_3$verified_level)^2
mean_squared_diff <- mean(squared_diff)
rmse <- sqrt(mean_squared_diff)
p1 <- plot_ly() %>%
add_trace(data=res_data_5, x=~timestamp, y=~thresh, mode = "lines",
type = "scatter", name = "rate of rise", line = list(width=0.5))
p2 <- plot_ly() %>%
add_trace(data=res_data_ori, x=~timestamp, y=~level, mode="lines",
type = "scatter", name = "original Data", line= list(width=0.5)) %>%
add_trace(data=verified_filtered, x=~timestamp, y=~verified_level, mode="lines",
type="scatter", name ="WMIS Data", line=list(width=0.4)) %>%
add_trace(data=res_data_3, x=~timestamp, y=~level, mode = "lines",
type = "scatter", name = "Smoothed Data", line = list(width = 0.6))
subplot(p1,p2, nrows = 2)
